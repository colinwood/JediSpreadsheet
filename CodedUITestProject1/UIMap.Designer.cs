// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestProject1
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIMySpreadSheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIMySpreadSheetWindow.UICellContentWindow.UICellContentEdit;
            WinButton uIEvaluationButton = this.UIMySpreadSheetWindow.UIEvaluationWindow.UIEvaluationButton;
            #endregion

            // Press keyboard shortcut keys 'Windows + m'
            Keyboard.SendKeys(this.RecordedMethod1Params.SendKeys, ModifierKeys.Windows);

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod1Params.UIMySpreadSheetWindowExePath, this.RecordedMethod1Params.UIMySpreadSheetWindowAlternateExePath);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(157, 79));

            // Type '1' in 'CellContent' text box
            uICellContentEdit.Text = this.RecordedMethod1Params.UICellContentEditText;

            // Click 'Evaluation' button
            Mouse.Click(uIEvaluationButton, new Point(20, 11));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIMySpreadSheetWindow.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValue' text box equals '1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICellValueEditText, uICellValueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIMySpreadSheetWindow.UIMySpreadSheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UISafetyFeaturesWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(29, 12));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(28, 17));
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UIMySpreadSheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIMySpreadSheetWindow.UICellContentWindow.UICellContentEdit;
            WinButton uIEvaluationButton = this.UIMySpreadSheetWindow.UIEvaluationWindow.UIEvaluationButton;
            WinButton uICloseButton = this.UIMySpreadSheetWindow.UIMySpreadSheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinTreeItem uIDesktopTreeItem = this.UISaveWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinComboBox uIFilenameComboBox = this.UISaveWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveWindow.UIItemWindow.UIFilenameEdit;
            #endregion

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod3Params.UIMySpreadSheetWindowExePath, this.RecordedMethod3Params.UIMySpreadSheetWindowAlternateExePath);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(72, 38));

            // Type '1' in 'CellContent' text box
            uICellContentEdit.Text = this.RecordedMethod3Params.UICellContentEditText;

            // Click 'Evaluation' button
            Mouse.Click(uIEvaluationButton, new Point(47, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(48, 11));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(32, 14));

            // Select 'Test' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.RecordedMethod3Params.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.RecordedMethod3Params.UIFilenameEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// RecordedMethod4 - Use 'RecordedMethod4Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIMySpreadSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIItem0penWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinListItem uITestsprdListItem = this.UIItem0penWindow.UIItemWindow.UIItemsViewList.UITestsprdListItem;
            WinSplitButton uIOpenSplitButton = this.UIItem0penWindow.UIOpenWindow.UIOpenSplitButton;
            #endregion

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod4Params.UIMySpreadSheetWindowExePath, this.RecordedMethod4Params.UIMySpreadSheetWindowAlternateExePath);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(40, 8));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(45, 20));

            // Click 'Test.sprd' list item
            Mouse.Click(uITestsprdListItem, new Point(74, 8));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(38, 7));
        }
        
        /// <summary>
        /// RecordedMethod5
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIChipsengutaheduhomenWindow.UIChipsengutaheduhomenTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 6));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(36, 19));
        }
        
        /// <summary>
        /// RecordedMethod6
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIMySpreadSheetWindow.UIMySpreadSheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(39, 4));
        }
        
        /// <summary>
        /// RecordedMethod7 - Use 'RecordedMethod7Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIMySpreadSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIItem0penWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinEdit uINameEdit = this.UIItem0penWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinButton uICloseButton = this.UIChipsengutaheduhomenWindow.UIChipsengutaheduhomenTitleBar.UICloseButton;
            WinButton uICloseButton1 = this.UIWarningWindow.UIWarningTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinButton uICloseButton2 = this.UIMySpreadSheetWindow.UIMySpreadSheetTitleBar.UICloseButton;
            WinSplitButton uIOpenSplitButton = this.UIItem0penWindow.UIOpenWindow.UIOpenSplitButton;
            #endregion

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod7Params.UIMySpreadSheetWindowExePath, this.RecordedMethod7Params.UIMySpreadSheetWindowAlternateExePath);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(56, 9));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(31, 10));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(44, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 5));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(22, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(30, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(48, 15));

            // Click 'Close' button
            Mouse.Click(uICloseButton2, new Point(34, 18));

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow1 = ApplicationUnderTest.Launch(this.RecordedMethod7Params.UIMySpreadSheetWindowExePath1, this.RecordedMethod7Params.UIMySpreadSheetWindowAlternateExePath1);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(59, 7));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(7, 5));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(42, 10));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(15, 9));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIChipsengutaheduhomenWindow.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValue' text box equals '1'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UICellValueEditText, uICellValueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod8
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIChipsengutaheduhomenWindow.UIChipsengutaheduhomenTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinButton uICloseButton1 = this.UIMySpreadSheetWindow.UIMySpreadSheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(24, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(25, 18));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(14, 2));
        }
        
        /// <summary>
        /// RecordedMethod9 - Use 'RecordedMethod9Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIMySpreadSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIItem0penWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinEdit uINameEdit = this.UIItem0penWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIItem0penWindow.UIOpenWindow.UIOpenSplitButton;
            WinClient uISpreadsheetPanel1Client = this.UIChipsengutaheduhomenWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIChipsengutaheduhomenWindow.UICellContentWindow.UICellContentEdit;
            WinButton uIEvaluationButton = this.UIChipsengutaheduhomenWindow.UIEvaluationWindow.UIEvaluationButton;
            WinMenuItem uISaveMenuItem = this.UIChipsengutaheduhomenWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UISaveMenuItem;
            WinMenuItem uICloseMenuItem = this.UIChipsengutaheduhomenWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod9Params.UIMySpreadSheetWindowExePath, this.RecordedMethod9Params.UIMySpreadSheetWindowAlternateExePath);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(51, 7));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(44, 7));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(39, 9));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(39, 14));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(148, 37));

            // Type '10' in 'CellContent' text box
            uICellContentEdit.Text = this.RecordedMethod9Params.UICellContentEditText;

            // Click 'Evaluation' button
            Mouse.Click(uIEvaluationButton, new Point(40, 12));

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(56, 14));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(57, 9));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(58, 12));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(28, 9));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(8, 2));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(144, 42));
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIChipsengutaheduhomenWindow.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValue' text box equals '10'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UICellValueEditText, uICellValueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod10
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIChipsengutaheduhomenWindow.UIChipsengutaheduhomenTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinButton uICloseButton1 = this.UIMySpreadSheetWindow.UIMySpreadSheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(28, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(64, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(35, 6));
        }
        
        /// <summary>
        /// RecordedMethod11 - Use 'RecordedMethod11Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod11()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UIMySpreadSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod11Params.UIMySpreadSheetWindowExePath, this.RecordedMethod11Params.UIMySpreadSheetWindowAlternateExePath);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(43, 9));
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinTitleBar uIMySpreadSheetTitleBar = this.UIMySpreadSheetWindow1.UIMySpreadSheetTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'MySpreadSheet' title bar equals 'MySpreadSheet'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIMySpreadSheetTitleBarDisplayText, uIMySpreadSheetTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod12 - Use 'RecordedMethod12Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod12()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIMySpreadSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIItem0penWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinEdit uINameEdit = this.UIItem0penWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinClient uISpreadsheetPanel1Client = this.UIChipsengutaheduhomenWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIChipsengutaheduhomenWindow.UICellContentWindow.UICellContentEdit;
            WinButton uIEvaluationButton = this.UIChipsengutaheduhomenWindow.UIEvaluationWindow.UIEvaluationButton;
            WinMenuItem uICloseMenuItem = this.UIChipsengutaheduhomenWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UISaveWindow.UIYesWindow.UIYesButton;
            WinButton uICloseButton = this.UIMySpreadSheetWindow.UIMySpreadSheetTitleBar.UICloseButton;
            #endregion

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod12Params.UIMySpreadSheetWindowExePath, this.RecordedMethod12Params.UIMySpreadSheetWindowAlternateExePath);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(45, 8));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(39, 14));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(51, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(214, 36));

            // Type '3' in 'CellContent' text box
            uICellContentEdit.Text = this.RecordedMethod12Params.UICellContentEditText;

            // Click 'Evaluation' button
            Mouse.Click(uIEvaluationButton, new Point(53, 16));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(79, 9));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(56, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(35, 7));
        }
        
        /// <summary>
        /// RecordedMethod13 - Use 'RecordedMethod13Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod13()
        {
            #region Variable Declarations
            WinMenuItem uIOpenMenuItem = this.UIMySpreadSheetWindow.UIMenuStrip1MenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinTreeItem uIDesktopTreeItem = this.UIItem0penWindow.UITreeViewWindow.UITreeViewTree.UIFavoritesTreeItem.UIDesktopTreeItem;
            WinEdit uINameEdit = this.UIItem0penWindow.UIItemWindow.UITestsprdListItem.UINameEdit;
            WinControl uIItemDropDownButton = this.UIItem0penWindow.UIOpenSplitButton.UIItemDropDownButton;
            WinSplitButton uIOpenSplitButton = this.UIItem0penWindow.UIOpenWindow.UIOpenSplitButton;
            WinClient uISpreadsheetPanel1Client = this.UIChipsengutaheduhomenWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uICellContentEdit = this.UIChipsengutaheduhomenWindow.UICellContentWindow.UICellContentEdit;
            WinButton uIEvaluationButton = this.UIChipsengutaheduhomenWindow.UIEvaluationWindow.UIEvaluationButton;
            #endregion

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod13Params.UIMySpreadSheetWindowExePath, this.RecordedMethod13Params.UIMySpreadSheetWindowAlternateExePath);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(55, 13));

            // Click 'Favorites' -> 'Desktop' tree item
            Mouse.Click(uIDesktopTreeItem, new Point(9, 8));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(21, 13));

            // Click DropDownButton
            Mouse.Click(uIItemDropDownButton, new Point(7, 15));

            // Click DropDownButton
            Mouse.Click(uIItemDropDownButton, new Point(7, 15));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(50, 13));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(133, 92));

            // Type 'ha' in 'CellContent' text box
            uICellContentEdit.Text = this.RecordedMethod13Params.UICellContentEditText;

            // Click 'Evaluation' button
            Mouse.Click(uIEvaluationButton, new Point(59, 17));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(214, 97));

            // Type '=B4' in 'CellContent' text box
            uICellContentEdit.Text = this.RecordedMethod13Params.UICellContentEditText1;

            // Click 'Evaluation' button
            Mouse.Click(uIEvaluationButton, new Point(61, 15));
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinEdit uICellValueEdit = this.UIChipsengutaheduhomenWindow.UICellValueWindow.UICellValueEdit;
            #endregion

            // Verify that the 'Text' property of 'CellValue' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UICellValueEditText, uICellValueEdit.Text);

            // Verify that the 'Text' property of 'CellValue' text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UICellValueEditText1, uICellValueEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod14
        /// </summary>
        public void RecordedMethod14()
        {
            #region Variable Declarations
            WinButton uICloseButton = this.UIChipsengutaheduhomenWindow.UIChipsengutaheduhomenTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinButton uICloseButton1 = this.UIMySpreadSheetWindow.UIMySpreadSheetTitleBar.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(32, 5));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(35, 14));

            // Click 'Close' button
            Mouse.Click(uICloseButton1, new Point(27, 6));
        }
        
        /// <summary>
        /// RecordedMethod15 - Use 'RecordedMethod15Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod15()
        {
            #region Variable Declarations
            WinMenuItem uIViewHelpMenuItem = this.UIMySpreadSheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIViewHelpMenuItem;
            #endregion

            // Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uIMySpreadSheetWindow = ApplicationUnderTest.Launch(this.RecordedMethod15Params.UIMySpreadSheetWindowExePath, this.RecordedMethod15Params.UIMySpreadSheetWindowAlternateExePath);

            // The recording for the application under test '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe' may not be correct as it is located on a network share. Please install the application on a local path.

            // Click 'Help' -> 'View Help' menu item
            Mouse.Click(uIViewHelpMenuItem, new Point(73, 9));
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WinTitleBar uIHowtousePS6TitleBar = this.UIHowtousePS6Window.UIHowtousePS6TitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'How to use PS6' title bar equals 'How to use PS6'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UIHowtousePS6TitleBarDisplayText, uIHowtousePS6TitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod16
        /// </summary>
        public void RecordedMethod16()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIHowtousePS6Window.UIOKWindow.UIOKButton;
            WinMenuItem uITechinalSupportMenuItem = this.UIMySpreadSheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UITechinalSupportMenuItem;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(41, 8));

            // Click 'Help' -> 'Techinal Support' menu item
            Mouse.Click(uITechinalSupportMenuItem, new Point(58, 8));
        }
        
        /// <summary>
        /// AssertMethod7 - Use 'AssertMethod7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            WinTitleBar uIReferenceTitleBar = this.UIReferenceWindow.UIReferenceTitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Reference' title bar equals 'Reference'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UIReferenceTitleBarDisplayText, uIReferenceTitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod17
        /// </summary>
        public void RecordedMethod17()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIReferenceWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIAboutMySpreadSheetMenuItem = this.UIMySpreadSheetWindow.UIMenuStrip1MenuBar.UIHelpMenuItem.UIAboutMySpreadSheetMenuItem;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(66, 13));

            // Click 'Help' -> 'About MySpreadSheet' menu item
            Mouse.Click(uIAboutMySpreadSheetMenuItem, new Point(96, 4));
        }
        
        /// <summary>
        /// AssertMethod8 - Use 'AssertMethod8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            WinTitleBar uIInformationofPS6TitleBar = this.UIInformationofPS6Window.UIInformationofPS6TitleBar;
            #endregion

            // Verify that the 'DisplayText' property of 'Information of PS6' title bar equals 'Information of PS6'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UIInformationofPS6TitleBarDisplayText, uIInformationofPS6TitleBar.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod18
        /// </summary>
        public void RecordedMethod18()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIInformationofPS6Window.UIOKWindow.UIOKButton;
            WinButton uICloseButton = this.UIMySpreadSheetWindow.UIMySpreadSheetTitleBar.UICloseButton;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(19, 6));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(27, 8));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual RecordedMethod4Params RecordedMethod4Params
        {
            get
            {
                if ((this.mRecordedMethod4Params == null))
                {
                    this.mRecordedMethod4Params = new RecordedMethod4Params();
                }
                return this.mRecordedMethod4Params;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod9Params RecordedMethod9Params
        {
            get
            {
                if ((this.mRecordedMethod9Params == null))
                {
                    this.mRecordedMethod9Params = new RecordedMethod9Params();
                }
                return this.mRecordedMethod9Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual RecordedMethod11Params RecordedMethod11Params
        {
            get
            {
                if ((this.mRecordedMethod11Params == null))
                {
                    this.mRecordedMethod11Params = new RecordedMethod11Params();
                }
                return this.mRecordedMethod11Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual RecordedMethod12Params RecordedMethod12Params
        {
            get
            {
                if ((this.mRecordedMethod12Params == null))
                {
                    this.mRecordedMethod12Params = new RecordedMethod12Params();
                }
                return this.mRecordedMethod12Params;
            }
        }
        
        public virtual RecordedMethod13Params RecordedMethod13Params
        {
            get
            {
                if ((this.mRecordedMethod13Params == null))
                {
                    this.mRecordedMethod13Params = new RecordedMethod13Params();
                }
                return this.mRecordedMethod13Params;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual RecordedMethod15Params RecordedMethod15Params
        {
            get
            {
                if ((this.mRecordedMethod15Params == null))
                {
                    this.mRecordedMethod15Params = new RecordedMethod15Params();
                }
                return this.mRecordedMethod15Params;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public UIMySpreadSheetWindow UIMySpreadSheetWindow
        {
            get
            {
                if ((this.mUIMySpreadSheetWindow == null))
                {
                    this.mUIMySpreadSheetWindow = new UIMySpreadSheetWindow();
                }
                return this.mUIMySpreadSheetWindow;
            }
        }
        
        public UISafetyFeaturesWindow UISafetyFeaturesWindow
        {
            get
            {
                if ((this.mUISafetyFeaturesWindow == null))
                {
                    this.mUISafetyFeaturesWindow = new UISafetyFeaturesWindow();
                }
                return this.mUISafetyFeaturesWindow;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow();
                }
                return this.mUISaveWindow;
            }
        }
        
        public UIItemWindow2 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow2();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItem0penWindow UIItem0penWindow
        {
            get
            {
                if ((this.mUIItem0penWindow == null))
                {
                    this.mUIItem0penWindow = new UIItem0penWindow();
                }
                return this.mUIItem0penWindow;
            }
        }
        
        public UIChipsengutaheduhomenWindow UIChipsengutaheduhomenWindow
        {
            get
            {
                if ((this.mUIChipsengutaheduhomenWindow == null))
                {
                    this.mUIChipsengutaheduhomenWindow = new UIChipsengutaheduhomenWindow();
                }
                return this.mUIChipsengutaheduhomenWindow;
            }
        }
        
        public UIMySpreadSheetWindow1 UIMySpreadSheetWindow1
        {
            get
            {
                if ((this.mUIMySpreadSheetWindow1 == null))
                {
                    this.mUIMySpreadSheetWindow1 = new UIMySpreadSheetWindow1();
                }
                return this.mUIMySpreadSheetWindow1;
            }
        }
        
        public UIHowtousePS6Window UIHowtousePS6Window
        {
            get
            {
                if ((this.mUIHowtousePS6Window == null))
                {
                    this.mUIHowtousePS6Window = new UIHowtousePS6Window();
                }
                return this.mUIHowtousePS6Window;
            }
        }
        
        public UIReferenceWindow UIReferenceWindow
        {
            get
            {
                if ((this.mUIReferenceWindow == null))
                {
                    this.mUIReferenceWindow = new UIReferenceWindow();
                }
                return this.mUIReferenceWindow;
            }
        }
        
        public UIInformationofPS6Window UIInformationofPS6Window
        {
            get
            {
                if ((this.mUIInformationofPS6Window == null))
                {
                    this.mUIInformationofPS6Window = new UIInformationofPS6Window();
                }
                return this.mUIInformationofPS6Window;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private RecordedMethod4Params mRecordedMethod4Params;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod9Params mRecordedMethod9Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private RecordedMethod11Params mRecordedMethod11Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private RecordedMethod12Params mRecordedMethod12Params;
        
        private RecordedMethod13Params mRecordedMethod13Params;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private RecordedMethod15Params mRecordedMethod15Params;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private UIMySpreadSheetWindow mUIMySpreadSheetWindow;
        
        private UISafetyFeaturesWindow mUISafetyFeaturesWindow;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private UIItemWindow2 mUIItemWindow;
        
        private UIItem0penWindow mUIItem0penWindow;
        
        private UIChipsengutaheduhomenWindow mUIChipsengutaheduhomenWindow;
        
        private UIMySpreadSheetWindow1 mUIMySpreadSheetWindow1;
        
        private UIHowtousePS6Window mUIHowtousePS6Window;
        
        private UIReferenceWindow mUIReferenceWindow;
        
        private UIInformationofPS6Window mUIInformationofPS6Window;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Press keyboard shortcut keys 'Windows + m'
        /// </summary>
        public string SendKeys = "m";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValue' text box equals '1'
        /// </summary>
        public string UICellValueEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '1' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "1";
        
        /// <summary>
        /// Select 'Test' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "Test";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod4Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath1 = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath1 = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValue' text box equals '1'
        /// </summary>
        public string UICellValueEditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod9Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '10' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValue' text box equals '10'
        /// </summary>
        public string UICellValueEditText = "10";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod11Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'MySpreadSheet' title bar equals 'MySpreadSheet'
        /// </summary>
        public string UIMySpreadSheetTitleBarDisplayText = "MySpreadSheet";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod12Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '3' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod13Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'ha' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText = "ha";
        
        /// <summary>
        /// Type '=B4' in 'CellContent' text box
        /// </summary>
        public string UICellContentEditText1 = "=B4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'CellValue' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UICellValueEditText = "SpreadsheetUtilities.FormulaError";
        
        /// <summary>
        /// Verify that the 'Text' property of 'CellValue' text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UICellValueEditText1 = "SpreadsheetUtilities.FormulaError";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod15'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedMethod15Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '\\chips.eng.utah.edu\home\nyoon\.win_my_documents\Visual Studio 2013\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UIMySpreadSheetWindowAlternateExePath = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_my_documents\\Visual Studio 2013\\Projects\\PS6" +
            "\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'How to use PS6' title bar equals 'How to use PS6'
        /// </summary>
        public string UIHowtousePS6TitleBarDisplayText = "How to use PS6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Reference' title bar equals 'Reference'
        /// </summary>
        public string UIReferenceTitleBarDisplayText = "Reference";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'Information of PS6' title bar equals 'Information of PS6'
        /// </summary>
        public string UIInformationofPS6TitleBarDisplayText = "Information of PS6";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMySpreadSheetWindow : WinWindow
    {
        
        public UIMySpreadSheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MySpreadSheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellContentWindow UICellContentWindow
        {
            get
            {
                if ((this.mUICellContentWindow == null))
                {
                    this.mUICellContentWindow = new UICellContentWindow(this);
                }
                return this.mUICellContentWindow;
            }
        }
        
        public UIEvaluationWindow UIEvaluationWindow
        {
            get
            {
                if ((this.mUIEvaluationWindow == null))
                {
                    this.mUIEvaluationWindow = new UIEvaluationWindow(this);
                }
                return this.mUIEvaluationWindow;
            }
        }
        
        public UICellValueWindow UICellValueWindow
        {
            get
            {
                if ((this.mUICellValueWindow == null))
                {
                    this.mUICellValueWindow = new UICellValueWindow(this);
                }
                return this.mUICellValueWindow;
            }
        }
        
        public UIMySpreadSheetTitleBar UIMySpreadSheetTitleBar
        {
            get
            {
                if ((this.mUIMySpreadSheetTitleBar == null))
                {
                    this.mUIMySpreadSheetTitleBar = new UIMySpreadSheetTitleBar(this);
                }
                return this.mUIMySpreadSheetTitleBar;
            }
        }
        
        public UIMenuStrip1MenuBar UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UICellContentWindow mUICellContentWindow;
        
        private UIEvaluationWindow mUIEvaluationWindow;
        
        private UICellValueWindow mUICellValueWindow;
        
        private UIMySpreadSheetTitleBar mUIMySpreadSheetTitleBar;
        
        private UIMenuStrip1MenuBar mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellContentWindow : WinWindow
    {
        
        public UICellContentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContent";
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIEvaluationWindow : WinWindow
    {
        
        public UIEvaluationWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Evaluation";
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIEvaluationButton
        {
            get
            {
                if ((this.mUIEvaluationButton == null))
                {
                    this.mUIEvaluationButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEvaluationButton.SearchProperties[WinButton.PropertyNames.Name] = "Evaluation";
                    this.mUIEvaluationButton.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUIEvaluationButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEvaluationButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellValueWindow : WinWindow
    {
        
        public UICellValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellValue";
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueEdit
        {
            get
            {
                if ((this.mUICellValueEdit == null))
                {
                    this.mUICellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueEdit.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUICellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMySpreadSheetTitleBar : WinTitleBar
    {
        
        public UIMySpreadSheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private UIHelpMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIOpenMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UIViewHelpMenuItem
        {
            get
            {
                if ((this.mUIViewHelpMenuItem == null))
                {
                    this.mUIViewHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIViewHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "View Help";
                    this.mUIViewHelpMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIViewHelpMenuItem.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUIViewHelpMenuItem;
            }
        }
        
        public WinMenuItem UITechinalSupportMenuItem
        {
            get
            {
                if ((this.mUITechinalSupportMenuItem == null))
                {
                    this.mUITechinalSupportMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUITechinalSupportMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Techinal Support";
                    this.mUITechinalSupportMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUITechinalSupportMenuItem.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUITechinalSupportMenuItem;
            }
        }
        
        public WinMenuItem UIAboutMySpreadSheetMenuItem
        {
            get
            {
                if ((this.mUIAboutMySpreadSheetMenuItem == null))
                {
                    this.mUIAboutMySpreadSheetMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutMySpreadSheetMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About MySpreadSheet";
                    this.mUIAboutMySpreadSheetMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutMySpreadSheetMenuItem.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUIAboutMySpreadSheetMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUIViewHelpMenuItem;
        
        private WinMenuItem mUITechinalSupportMenuItem;
        
        private WinMenuItem mUIAboutMySpreadSheetMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISafetyFeaturesWindow : WinWindow
    {
        
        public UISafetyFeaturesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Safety Features";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Safety Features");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Safety Features");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Safety Features");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public UIWarningTitleBar UIWarningTitleBar
        {
            get
            {
                if ((this.mUIWarningTitleBar == null))
                {
                    this.mUIWarningTitleBar = new UIWarningTitleBar(this);
                }
                return this.mUIWarningTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIYesWindow mUIYesWindow;
        
        private UIWarningTitleBar mUIWarningTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIWarningTitleBar : WinTitleBar
    {
        
        public UIWarningTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1(this);
                }
                return this.mUIYesWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIYesWindow1 mUIYesWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITreeViewTree : WinTree
    {
        
        public UITreeViewTree(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFavoritesTreeItem : WinTreeItem
    {
        
        public UIFavoritesTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIYesWindow1 : WinWindow
    {
        
        public UIYesWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Save");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Save");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            #endregion
        }
        
        #region Properties
        public WinList UIItemList
        {
            get
            {
                if ((this.mUIItemList == null))
                {
                    this.mUIItemList = new WinList(this);
                }
                return this.mUIItemList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIItemList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItem0penWindow : WinWindow
    {
        
        public UIItem0penWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "0pen";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow1 UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow1(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIOpenSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new UIOpenSplitButton(this);
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow1 mUITreeViewWindow;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UICancelWindow mUICancelWindow;
        
        private UIOpenSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITreeViewWindow1 : WinWindow
    {
        
        public UITreeViewWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public UITreeViewTree1 UITreeViewTree
        {
            get
            {
                if ((this.mUITreeViewTree == null))
                {
                    this.mUITreeViewTree = new UITreeViewTree1(this);
                }
                return this.mUITreeViewTree;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewTree1 mUITreeViewTree;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITreeViewTree1 : WinTree
    {
        
        public UITreeViewTree1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTree.PropertyNames.Name] = "Namespace Tree Control";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public UIFavoritesTreeItem1 UIFavoritesTreeItem
        {
            get
            {
                if ((this.mUIFavoritesTreeItem == null))
                {
                    this.mUIFavoritesTreeItem = new UIFavoritesTreeItem1(this);
                }
                return this.mUIFavoritesTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFavoritesTreeItem1 mUIFavoritesTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFavoritesTreeItem1 : WinTreeItem
    {
        
        public UIFavoritesTreeItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Favorites";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDesktopTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDesktopTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDesktopTreeItem.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUIDesktopTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDesktopTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public UITestsprdListItem UITestsprdListItem
        {
            get
            {
                if ((this.mUITestsprdListItem == null))
                {
                    this.mUITestsprdListItem = new UITestsprdListItem(this);
                }
                return this.mUITestsprdListItem;
            }
        }
        
        public UIItemsViewList UIItemsViewList
        {
            get
            {
                if ((this.mUIItemsViewList == null))
                {
                    this.mUIItemsViewList = new UIItemsViewList(this);
                }
                return this.mUIItemsViewList;
            }
        }
        #endregion
        
        #region Fields
        private UITestsprdListItem mUITestsprdListItem;
        
        private UIItemsViewList mUIItemsViewList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITestsprdListItem : WinListItem
    {
        
        public UITestsprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Test.sprd";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemsViewList : WinList
    {
        
        public UIItemsViewList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Items View";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinListItem UITestsprdListItem
        {
            get
            {
                if ((this.mUITestsprdListItem == null))
                {
                    this.mUITestsprdListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUITestsprdListItem.SearchProperties[WinListItem.PropertyNames.Name] = "Test.sprd";
                    this.mUITestsprdListItem.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUITestsprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUITestsprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOpenSplitButton : WinSplitButton
    {
        
        public UIOpenSplitButton(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinButton.PropertyNames.Name] = "Open";
            this.WindowTitles.Add("0pen");
            #endregion
        }
        
        #region Properties
        public WinControl UIItemDropDownButton
        {
            get
            {
                if ((this.mUIItemDropDownButton == null))
                {
                    this.mUIItemDropDownButton = new WinControl(this);
                    #region Search Criteria
                    this.mUIItemDropDownButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "DropDownButton";
                    this.mUIItemDropDownButton.WindowTitles.Add("0pen");
                    #endregion
                }
                return this.mUIItemDropDownButton;
            }
        }
        #endregion
        
        #region Fields
        private WinControl mUIItemDropDownButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIChipsengutaheduhomenWindow : WinWindow
    {
        
        public UIChipsengutaheduhomenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
            #endregion
        }
        
        #region Properties
        public UIChipsengutaheduhomenTitleBar UIChipsengutaheduhomenTitleBar
        {
            get
            {
                if ((this.mUIChipsengutaheduhomenTitleBar == null))
                {
                    this.mUIChipsengutaheduhomenTitleBar = new UIChipsengutaheduhomenTitleBar(this);
                }
                return this.mUIChipsengutaheduhomenTitleBar;
            }
        }
        
        public UICellValueWindow1 UICellValueWindow
        {
            get
            {
                if ((this.mUICellValueWindow == null))
                {
                    this.mUICellValueWindow = new UICellValueWindow1(this);
                }
                return this.mUICellValueWindow;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICellContentWindow1 UICellContentWindow
        {
            get
            {
                if ((this.mUICellContentWindow == null))
                {
                    this.mUICellContentWindow = new UICellContentWindow1(this);
                }
                return this.mUICellContentWindow;
            }
        }
        
        public UIEvaluationWindow1 UIEvaluationWindow
        {
            get
            {
                if ((this.mUIEvaluationWindow == null))
                {
                    this.mUIEvaluationWindow = new UIEvaluationWindow1(this);
                }
                return this.mUIEvaluationWindow;
            }
        }
        
        public UIMenuStrip1MenuBar1 UIMenuStrip1MenuBar
        {
            get
            {
                if ((this.mUIMenuStrip1MenuBar == null))
                {
                    this.mUIMenuStrip1MenuBar = new UIMenuStrip1MenuBar1(this);
                }
                return this.mUIMenuStrip1MenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIChipsengutaheduhomenTitleBar mUIChipsengutaheduhomenTitleBar;
        
        private UICellValueWindow1 mUICellValueWindow;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UICellContentWindow1 mUICellContentWindow;
        
        private UIEvaluationWindow1 mUIEvaluationWindow;
        
        private UIMenuStrip1MenuBar1 mUIMenuStrip1MenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIChipsengutaheduhomenTitleBar : WinTitleBar
    {
        
        public UIChipsengutaheduhomenTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellValueWindow1 : WinWindow
    {
        
        public UICellValueWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellValue";
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellValueEdit
        {
            get
            {
                if ((this.mUICellValueEdit == null))
                {
                    this.mUICellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellValueEdit.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
                    #endregion
                }
                return this.mUICellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICellContentWindow1 : WinWindow
    {
        
        public UICellContentWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "CellContent";
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
            #endregion
        }
        
        #region Properties
        public WinEdit UICellContentEdit
        {
            get
            {
                if ((this.mUICellContentEdit == null))
                {
                    this.mUICellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICellContentEdit.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
                    #endregion
                }
                return this.mUICellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIEvaluationWindow1 : WinWindow
    {
        
        public UIEvaluationWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Evaluation";
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
            #endregion
        }
        
        #region Properties
        public WinButton UIEvaluationButton
        {
            get
            {
                if ((this.mUIEvaluationButton == null))
                {
                    this.mUIEvaluationButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEvaluationButton.SearchProperties[WinButton.PropertyNames.Name] = "Evaluation";
                    this.mUIEvaluationButton.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
                    #endregion
                }
                return this.mUIEvaluationButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEvaluationButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMenuStrip1MenuBar1 : WinMenuBar
    {
        
        public UIMenuStrip1MenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("\\\\chips.eng.utah.edu\\home\\nyoon\\.win_desktop\\Test.sprd");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIMySpreadSheetWindow1 : WinWindow
    {
        
        public UIMySpreadSheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "MySpreadSheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("MySpreadSheet");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIMySpreadSheetTitleBar
        {
            get
            {
                if ((this.mUIMySpreadSheetTitleBar == null))
                {
                    this.mUIMySpreadSheetTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIMySpreadSheetTitleBar.WindowTitles.Add("MySpreadSheet");
                    #endregion
                }
                return this.mUIMySpreadSheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIMySpreadSheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIHowtousePS6Window : WinWindow
    {
        
        public UIHowtousePS6Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "How to use PS6";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("How to use PS6");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIHowtousePS6TitleBar
        {
            get
            {
                if ((this.mUIHowtousePS6TitleBar == null))
                {
                    this.mUIHowtousePS6TitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIHowtousePS6TitleBar.WindowTitles.Add("How to use PS6");
                    #endregion
                }
                return this.mUIHowtousePS6TitleBar;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIHowtousePS6TitleBar;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("How to use PS6");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("How to use PS6");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIReferenceWindow : WinWindow
    {
        
        public UIReferenceWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Reference";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Reference");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIReferenceTitleBar
        {
            get
            {
                if ((this.mUIReferenceTitleBar == null))
                {
                    this.mUIReferenceTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIReferenceTitleBar.WindowTitles.Add("Reference");
                    #endregion
                }
                return this.mUIReferenceTitleBar;
            }
        }
        
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIReferenceTitleBar;
        
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Reference");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Reference");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIInformationofPS6Window : WinWindow
    {
        
        public UIInformationofPS6Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Information of PS6";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Information of PS6");
            #endregion
        }
        
        #region Properties
        public WinTitleBar UIInformationofPS6TitleBar
        {
            get
            {
                if ((this.mUIInformationofPS6TitleBar == null))
                {
                    this.mUIInformationofPS6TitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIInformationofPS6TitleBar.WindowTitles.Add("Information of PS6");
                    #endregion
                }
                return this.mUIInformationofPS6TitleBar;
            }
        }
        
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinTitleBar mUIInformationofPS6TitleBar;
        
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Information of PS6");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Information of PS6");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
